@page "/upload"
@using CashFlowAnalyzer.Client.FinancialData
@attribute [Authorize]
@inject SpreadsheetReader SpreadsheetReader

<PageTitle>Upload</PageTitle>

<h1>Upload</h1>

<div class="mb-3">
    <label for="currencySelect" class="form-label">Select Default Currency</label>
    <select id="currencySelect" @onchange="OnCurrencySelectionChanged" class="form-select">
        <option value="">-- Select a Currency --</option>
        @foreach (var currency in Currencies.GetAllCurrencies())
        {
            <option value="@currency">@currency.ToString()</option>
        }
    </select>
</div>

<div class="mb-3">
    <label for="bankSelect" class="form-label">Select Bank</label>
    <select id="bankSelect" @bind="selectedBank" class="form-select" disabled="@isPreviewMode">
        <option value="">-- Select a Bank --</option>
        @foreach (var bank in Enum.GetValues(typeof(Bank)).Cast<Bank>())
        {
            <option value="@bank">@bank.ToFriendlyString()</option>
        }
    </select>
</div>

<InputFile OnChange="HandleFileSelected" class="form-control" disabled="@((selectedBank is null) && (defaultCurrency is null))" />

@if (financialRecords == null || financialRecords.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Please, review the categories</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Recipient Name</th>
                <th>Value</th>
                <th>Transaction Currency</th>
                <th>Target Currency Value</th>
                <th>Category</th>
                <th>Sharing Mode</th>
                <th>Save</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in financialRecords)
            {
                <tr>
                    <td>@record.ProcessingDate.ToShortDateString()</td>
                    <td>@record.Recipient.Name</td>
                    <td>@record.Value</td>
                    <td>@record.TransactionCurrency</td>
                    <td>@record.ConvertedValue.ToString("F2")</td>
                    <td>
                        <select @onchange="(e) => OnCategorySelectionChanges(record, e)" class="form-select @(record.RequiresReview() ? "red-dropdown" : "")" disabled="@isPreviewMode">
                            @foreach (var category in Categories.GetAllCategories())
                            {
                                @* <option value="@category">@category</option> *@
                                <option value="@category.ToString()" selected="@((record.Category.ToString() == category.ToString()) ? "selected" : null)">@category</option>
                            }
                        </select>
                    </td>
                    <td>
                        <select @onchange="(e) => OnSharingModeSelectionChanges(record, e)" class="form-select @(record.Category.RequiresReview() ? "red-dropdown" : "")" disabled="@isPreviewMode">
                            @foreach (var mode in Enum.GetValues(typeof(SharingMode)).Cast<SharingMode>())
                            {
                                <option value="@mode.ToString()" selected="@((record.Category.Mode.ToString() == mode.ToString()) ? "selected" : null)">@mode.ToFriendlyString()</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="checkbox" checked="@((ShouldBeSaved(record)))" disabled />
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (isPreviewMode)
    {
        <button @onclick="TogglePreviewMode" class="btn btn-secondary">Edit</button>
        <button @onclick="SaveData" class="btn btn-success">Save</button>
    }
    else
    {
        <button @onclick="TogglePreviewMode" class="btn btn-primary" disabled="@HasRequiresReview()">Preview</button>
    }
}

@code {
    private bool isPreviewMode = false;
    private string payer = "me"; // ToDo: ThisShouldBeManualInputFromEditableDropdown
    private ICurrency defaultCurrency = Currencies.GetDefaultCurrency();
    private FinancialRecordMapper mapper;
    private List<FinancialRecord> spreadsheetFinancialRecords;
    private List<FinancialRecord> financialRecords;

    // TODo: bankRecords should be more abstract
    private List<CeskaSporitelnaRecord> bankRecords;
    private Bank? selectedBank;
    protected override async Task OnInitializedAsync()
    {
        spreadsheetFinancialRecords = new List<FinancialRecord>();
        financialRecords = new List<FinancialRecord>();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream();
        switch (selectedBank)
        {
            case Bank.CeskaSporitelna:
                bankRecords = await SpreadsheetReader.ReadCeskaSporitelnaSpreadsheetAsync(stream);
                break;
            default:
                throw new NotImplementedException();
        }   
        spreadsheetFinancialRecords = mapper.Map(bankRecords);
        financialRecords = spreadsheetFinancialRecords;
    }

    private void OnCategorySelectionChanges(FinancialRecord record, ChangeEventArgs e)
    {
        var selectedCategory = e.Value.ToString();
        var category = Categories.GetAllCategories().FirstOrDefault(c => c.Type.ToFriendlyString() == selectedCategory);
        if (category != null)
        {
            record.Category = category;
            StateHasChanged();
        }
    }

    private void OnSharingModeSelectionChanges(FinancialRecord record, ChangeEventArgs e)
    {
        var selectedMode = e.Value.ToString();
        if (Enum.TryParse(selectedMode, out SharingMode mode))
        {
            record.Category.Mode = mode;
            StateHasChanged();
        }
    }

    private bool ShouldBeSaved(FinancialRecord record) =>
        (record.Category.Mode != SharingMode.Ignored && record.Value != 0);

    private void OnCurrencySelectionChanged(ChangeEventArgs e)
    {
        var selectedCurrency = e.Value.ToString();
        defaultCurrency = Currencies.GetAllCurrencies().FirstOrDefault(c => c.ToString() == selectedCurrency);
        mapper = new FinancialRecordMapper(defaultCurrency, payer);
        if (bankRecords != null)
        {
            spreadsheetFinancialRecords = mapper.Map(bankRecords);
            financialRecords = spreadsheetFinancialRecords;
        }
    }
    private void TogglePreviewMode()
    {
        isPreviewMode = !isPreviewMode;
        if (isPreviewMode)
        {
            financialRecords = GetFilteredRecords().ToList();
        }
        else
        {
            financialRecords = spreadsheetFinancialRecords;
        }
    }
    
    private IEnumerable<FinancialRecord> GetFilteredRecords()
    {
        return financialRecords.Where(record => ShouldBeSaved(record));
    }

    private bool HasRequiresReview() => financialRecords.Any(record => record.RequiresReview() || record.Category.RequiresReview());

    private async Task SaveData()
    {
        // ToDo: Implement the logic to save the data to the database
        Console.WriteLine("Saving data to the database...");
    }
}
