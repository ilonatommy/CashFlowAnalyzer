@page "/upload"
@attribute [Authorize]
@inject SpreadsheetReader SpreadsheetReader
@inject IFinancialDataService FinancialDataService

<PageTitle>Upload</PageTitle>

<h1>Upload</h1>

<DropdownSelector TItem="ICurrency"
          Id="currencySelect"
          Label="Select Currency"
          Placeholder="Select Default Currency"
          Items="Currencies.GetAllCurrencies()"
          SelectedValue="defaultCurrency"
          SelectedValueChanged="OnCurrencySelectionChanged"
          IsDisabled="isPreviewMode" />

<DropdownSelector TItem="Bank?"
          Id="bankSelect"
          Label="Select Bank"
          Placeholder="Select Bank"
          Items="Enum.GetValues(typeof(Bank)).Cast<Bank?>()"
          SelectedValue="selectedBank"
          SelectedValueChanged="OnBankSelectionChanged"
          IsDisabled="isPreviewMode" />

<InputFile OnChange="HandleFileSelected" key="@(fileInputKey)" class="form-control" disabled="@((selectedBank is null) && (defaultCurrency is null))" />

@if (financialRecords == null || financialRecords.Count == 0)
{
    <p><em>Waiting for the file...</em></p>
}
else
{
    <p>Please, review the categories</p>
    <FinancialRecordsTable
        Records="financialRecords"
        SaveData="SaveData"
        IsPreviewMode="isPreviewMode"
        PreviewModeChanged="OnIsPreviewModeChanged" />
}
@if (showSuccessMessage)
{
    <AlertPopup Message="Records upload was successful." CssClass="alert-success" OnClose="@(() => { showSuccessMessage = false; })" />
}
@if (showErrorMessage)
{
    <AlertPopup Message="@errorMessage" CssClass="alert-danger" OnClose="@(() => { showErrorMessage = false; })" />
}

@code {
    private bool isPreviewMode = false;
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private string errorMessage = string.Empty;
    private string fileInputKey = Guid.NewGuid().ToString();
    private string payer = "me"; // ToDo: ThisShouldBeManualInputFromEditableDropdown
    private ICurrency defaultCurrency = Currencies.GetDefaultCurrency();
    private CurrencyMapper currencyMapper;
    private List<FinancialRecord> financialRecords;
    private Bank? selectedBank;
    protected override async Task OnInitializedAsync()
    {
        financialRecords = new List<FinancialRecord>();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream();
        try
        {
            switch (selectedBank)
            {
                case Bank.CeskaSporitelna:
                    var ceskaRecords = await SpreadsheetReader.ReadCeskaSporitelnaSpreadsheetAsync(stream);
                    CeskaSporitelnaMapper csMapper = new(currencyMapper, payer);
                    financialRecords = csMapper.Map(ceskaRecords);
                    break;
                case Bank.Raiffeisen:
                    var raiffeisenRecords = await SpreadsheetReader.ReadRaiffeisenSpreadsheetAsync(stream);
                    RaiffeisenMapper rMapper = new(currencyMapper, payer);
                    financialRecords = rMapper.Map(raiffeisenRecords);
                    break;
                default:
                    throw new NotImplementedException();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"File processing failed. {ex.Message}";
            Console.WriteLine($"Error processing file: {ex.Message}");
            showErrorMessage = true;
        }
    }

    private void OnIsPreviewModeChanged(bool value)
    {
        isPreviewMode = value;
        StateHasChanged();
    }

    private void OnCurrencySelectionChanged(ICurrency? value)
    {
        if (value == null)
            return;

        defaultCurrency = value;
        currencyMapper = new CurrencyMapper(defaultCurrency);
        if (financialRecords != null)
        {
            financialRecords = currencyMapper.MapCurrency(financialRecords);
        }
        StateHasChanged();
    }

    private void OnBankSelectionChanged(Bank? value) => selectedBank = value;

    private async Task SaveData(List<FinancialRecord> data)
    {
        try
        {
            await FinancialDataService.SaveFinancialRecordsAsync(data);
            showSuccessMessage = true;
            CleanUploadView();
        }
        catch (Exception ex)
        {
            errorMessage = $"Records upload failed. {ex.Message}";
            Console.WriteLine($"Error saving data: {ex.Message}");
            showErrorMessage = true;
        }
    }

    private void CloseSuccessMessage()
    {
        showSuccessMessage = false;
    }

    private void CloseErrorMessage()
    {
        showErrorMessage = false;
    }

    private void CleanUploadView()
    {
        // issue: resetting InputFile field does not work neatly:
        // https://github.com/SteveSandersonMS/BlazorInputFile/issues/2
        fileInputKey = Guid.NewGuid().ToString();
        financialRecords = new List<FinancialRecord>();
        selectedBank = null;
        defaultCurrency = null;
        StateHasChanged();
    }
}
